{"ast":null,"code":"var _jsxFileName = \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/pages/campaigns/new.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport instanceFactory from '../../ethereum/factory';\nimport Layout from '../../components/Layout';\nimport { Router } from '../../routes'; //Router object allows us to programmatically redirect users from one page to another inside of application.\n\nclass CampaignNew extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      minimumContribution: '',\n      errMsg: '',\n      loading: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      //Prevent event default behaviour: reloading the page on submission\n      event.preventDefault(); //Start Spinner\n\n      this.setState({\n        loading: true,\n        errMsg: ''\n      }); //Handler to catch an error from response from createCampaign from factory smart contract\n\n      try {\n        //Start Spinner to indicate to user that transaction is in process: Network is authorising transaction\n        //Success\n        const accounts = await web3.eth.getAccounts();\n        await instanceFactory.methods.createCampaign(this.state.minimumContribution).send({\n          from: accounts[0]\n        }); //Redirect user to campaignIndex page\n\n        Router.pushRoute('/');\n      } catch (err) {\n        //Failed\n        this.setState({\n          errMsg: err.message\n        });\n      } //Stop spinner when transaction complete\n\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, \" Create a Campaign\"), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      error: !!this.state.errMsg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, \" \", __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, \"Minimum Contribution\"), __jsx(Input, {\n      label: \"Wei\",\n      labelPosition: \"right\",\n      value: this.state.minimumContribution,\n      onChange: event => this.setState({\n        minimumContribution: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errMsg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }), __jsx(Button, {\n      primary: true,\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, \" Create! \")));\n  }\n\n}\n\nexport default CampaignNew;","map":{"version":3,"sources":["/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/pages/campaigns/new.js"],"names":["React","Component","Form","Button","Input","Message","web3","instanceFactory","Layout","Router","CampaignNew","minimumContribution","errMsg","loading","event","preventDefault","setState","accounts","eth","getAccounts","methods","createCampaign","state","send","from","pushRoute","err","message","render","onSubmit","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,OAA9B,QAA4C,mBAA5C;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,MAAT,QAAuB,cAAvB,C,CACA;;AAEA,MAAMC,WAAN,SAA0BT,SAA1B,CAAoC;AAAA;AAAA;;AAAA,mCAGxB;AACJU,MAAAA,mBAAmB,EAAE,EADjB;AAEJC,MAAAA,MAAM,EAAE,EAFJ;AAGJC,MAAAA,OAAO,EAAE;AAHL,KAHwB;;AAAA,sCASrB,MAAOC,KAAP,IAAiB;AAExB;AACAA,MAAAA,KAAK,CAACC,cAAN,GAHwB,CAKxB;;AACA,WAAKC,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAE,IAAX;AAAiBD,QAAAA,MAAM,EAAE;AAAzB,OAAd,EANwB,CAQxB;;AACA,UAAI;AACA;AACA;AACA,cAAMK,QAAQ,GAAG,MAAMX,IAAI,CAACY,GAAL,CAASC,WAAT,EAAvB;AACA,cAAMZ,eAAe,CAACa,OAAhB,CACLC,cADK,CACU,KAAKC,KAAL,CAAWX,mBADrB,EAELY,IAFK,CAEA;AACFC,UAAAA,IAAI,EAAEP,QAAQ,CAAC,CAAD;AADZ,SAFA,CAAN,CAJA,CAUA;;AACAR,QAAAA,MAAM,CAACgB,SAAP,CAAiB,GAAjB;AAEH,OAbD,CAaE,OAAOC,GAAP,EAAY;AACV;AACA,aAAKV,QAAL,CAAc;AAAEJ,UAAAA,MAAM,EAAEc,GAAG,CAACC;AAAd,SAAd;AACH,OAzBuB,CA2BxB;;;AACA,WAAKX,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAE;AAAX,OAAd;AAEH,KAvC+B;AAAA;;AAyChCe,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAII,MAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAKC,QAArB;AAA+B,MAAA,KAAK,EAAE,CAAC,CAAC,KAAKP,KAAL,CAAWV,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACI,MAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,EAEI,MAAC,KAAD;AACA,MAAA,KAAK,EAAC,KADN;AAEA,MAAA,aAAa,EAAC,OAFd;AAGA,MAAA,KAAK,EAAE,KAAKU,KAAL,CAAWX,mBAHlB;AAIA,MAAA,QAAQ,EAAEG,KAAK,IACX,KAAKE,QAAL,CAAc;AAAEL,QAAAA,mBAAmB,EAAEG,KAAK,CAACgB,MAAN,CAAaC;AAApC,OAAd,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAaI,MAAC,OAAD;AAAS,MAAA,KAAK,MAAd;AAAe,MAAA,MAAM,EAAC,OAAtB;AAA8B,MAAA,OAAO,EAAE,KAAKT,KAAL,CAAWV,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,EAcI,MAAC,MAAD;AAAQ,MAAA,OAAO,MAAf;AAAgB,MAAA,OAAO,EAAE,KAAKU,KAAL,CAAWT,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAdJ,CAJJ,CADJ;AAuBH;;AAjE+B;;AAoEpC,eAAeH,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Button, Input, Message} from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport instanceFactory from '../../ethereum/factory';\nimport Layout from '../../components/Layout';\nimport { Router } from '../../routes'; \n//Router object allows us to programmatically redirect users from one page to another inside of application.\n\nclass CampaignNew extends Component {\n\n    //State object to store state custom properties\n    state = {\n        minimumContribution: '',\n        errMsg: '',\n        loading: false\n    }\n\n    onSubmit = async (event) => {\n\n        //Prevent event default behaviour: reloading the page on submission\n        event.preventDefault();\n        \n        //Start Spinner\n        this.setState({ loading: true, errMsg: '' });\n\n        //Handler to catch an error from response from createCampaign from factory smart contract\n        try {\n            //Start Spinner to indicate to user that transaction is in process: Network is authorising transaction\n            //Success\n            const accounts = await web3.eth.getAccounts();\n            await instanceFactory.methods\n            .createCampaign(this.state.minimumContribution)\n            .send({ \n                from: accounts[0]\n            });\n\n            //Redirect user to campaignIndex page\n            Router.pushRoute('/');\n\n        } catch (err) {\n            //Failed\n            this.setState({ errMsg: err.message });\n        }\n\n        //Stop spinner when transaction complete\n        this.setState({ loading: false });\n        \n    };\n\n    render() {\n        return (\n            <Layout>\n                <h3> Create a Campaign</h3>\n\n                {/* Form to capture data for create campaign for factoryCampaign Contract function */}\n                <Form onSubmit={this.onSubmit} error={!!this.state.errMsg}> {/* error{bool}, If true show error*/}\n                    <Form.Field>\n                        <label >Minimum Contribution</label>\n                        <Input \n                        label=\"Wei\" \n                        labelPosition=\"right\"\n                        value={this.state.minimumContribution}\n                        onChange={event => \n                            this.setState({ minimumContribution: event.target.value })}\n                        />\n                    </Form.Field>\n                    \n                    {/* Message element from React Semantic UI - passing in state error message */}\n                    <Message error header=\"Oops!\" content={this.state.errMsg} />\n                    <Button primary loading={this.state.loading} > Create! </Button>\n                </Form>\n            </Layout>\n        );\n    };\n}\n\nexport default CampaignNew;"]},"metadata":{},"sourceType":"module"}