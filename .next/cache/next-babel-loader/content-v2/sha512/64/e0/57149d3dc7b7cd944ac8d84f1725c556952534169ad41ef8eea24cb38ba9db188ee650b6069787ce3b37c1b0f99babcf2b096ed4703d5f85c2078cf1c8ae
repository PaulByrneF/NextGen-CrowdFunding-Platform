{"ast":null,"code":"import _regeneratorRuntime from \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/components/RequestRow.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport Campaign from '../ethereum/campaign';\n\nvar RequestRow = /*#__PURE__*/function (_Component) {\n  _inherits(RequestRow, _Component);\n\n  var _super = _createSuper(RequestRow);\n\n  function RequestRow() {\n    var _this;\n\n    _classCallCheck(this, RequestRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onApprove\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var campaign, accounts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //Get instance of campaign contract\n              campaign = Campaign(_this.props.address); //Get accounts provided by metamask\n\n              _context.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context.sent;\n              _context.next = 6;\n              return campaign.methods.approveRequest(_this.props.id).send({\n                from: accounts[0]\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFinalize\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var campaign, accounts;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              campaign = Campaign(_this.props.address);\n              _context2.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context2.sent;\n              _context2.next = 6;\n              return campaign.methods.finalizeRequest(_this.props.id).send({\n                from: accounts[0]\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    return _this;\n  }\n\n  _createClass(RequestRow, [{\n    key: \"render\",\n    value: function render() {\n      var Row = Table.Row,\n          Cell = Table.Cell;\n      var _this$props = this.props,\n          id = _this$props.id,\n          request = _this$props.request,\n          approversCount = _this$props.approversCount;\n      var readyToFinalize = request.approvalCount > approversCount / 2;\n      return __jsx(Row, {\n        disabled: request.complete,\n        positive: readyToFinalize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, __jsx(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }\n      }, id), __jsx(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }, request.description), __jsx(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, web3.utils.fromWei(request.value, 'ether')), __jsx(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, request.recipient), __jsx(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }, request.approvalCount, \" / \", approversCount, \" \"), __jsx(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }\n      }, request.complete ? null : //if request.complete true show button, else hide\n      __jsx(Button, {\n        color: \"green\",\n        basic: true,\n        onClick: this.onApprove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }\n      }, \"Approve\")), __jsx(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, request.complete ? null : __jsx(Button, {\n        color: \"teal\",\n        basic: true,\n        onClick: this.onFinalize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      }, \"Finalize\")));\n    }\n  }]);\n\n  return RequestRow;\n}(Component);\n\nexport default RequestRow;","map":{"version":3,"sources":["/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/components/RequestRow.js"],"names":["React","Component","Button","Table","web3","Campaign","RequestRow","campaign","props","address","eth","getAccounts","accounts","methods","approveRequest","id","send","from","finalizeRequest","Row","Cell","request","approversCount","readyToFinalize","approvalCount","complete","description","utils","fromWei","value","recipient","onApprove","onFinalize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport Campaign from '../ethereum/campaign';\n\nclass RequestRow extends Component {\n\n    onApprove = async () => {\n\n        //Get instance of campaign contract\n        const campaign = Campaign(this.props.address);\n\n        //Get accounts provided by metamask\n        const accounts = await web3.eth.getAccounts();\n\n        //send request to campaign, calling the approveRequests function passing in the id.\n        await campaign.methods.approveRequest(this.props.id).send({\n            from: accounts[0]\n        });\n    };\n\n    onFinalize = async () => {\n\n        const campaign = Campaign(this.props.address);\n\n        const accounts = await web3.eth.getAccounts();\n\n        await campaign.methods.finalizeRequest(this.props.id).send({\n            from: accounts[0]\n        });\n    }\n\n    render() {\n        const { Row, Cell } = Table;\n        const {id, request, approversCount} = this.props;\n        const readyToFinalize = request.approvalCount > approversCount / 2;\n\n        return (\n            <Row disabled={request.complete} positive={readyToFinalize}>\n                <Cell>{id}</Cell>\n                <Cell>{request.description}</Cell>\n                <Cell>{web3.utils.fromWei(request.value, 'ether')}</Cell>\n                <Cell>{request.recipient}</Cell>\n                <Cell>{request.approvalCount} / { approversCount } </Cell>\n                <Cell>\n                    {request.complete ? null : ( //if request.complete true show button, else hide\n                        <Button color=\"green\" basic onClick={this.onApprove}>Approve</Button>\n                    )}\n                </Cell>\n                <Cell>\n                    { request.complete ? null : (\n                        <Button color=\"teal\" basic onClick={this.onFinalize}>Finalize</Button>\n                    )}\n                </Cell>\n            </Row>\n        );\n    };\n}\n\nexport default RequestRow;"]},"metadata":{},"sourceType":"module"}