{"ast":null,"code":"import Web3 from 'web3';\nlet web3; // Clause handles case of code being executed in browser and metamask is available.\n//typeof operator : to see if variable is defined\n\nif (false && typeof window.web3 !== 'undefined') {\n  // Connect to metamask\n  window.ethereum.request({\n    method: 'eth_requestAccounts'\n  }); //create new instance of Web3 and pass the injected web3 from metamask and it's respective provider to Rinkeby testnet specified in MetaMask tool\n  // hijack injected web3 instance from metamask and pass provider into web3 v1.0.3\n\n  web3 = new Web3(Web3.givenProvider);\n} else {\n  //We are on the server *OR* the user is not running metamask\n  //Passing in the Infura API Key to communicate with the Infura Ethereum Node \n  const provider = new Web3.providers.HttpProvider('https://rinkeby.infura.io/v3/b775911c6d024d2f98148e74f80eff86');\n  web3 = new Web3(provider);\n} //Export instance\n\n\nexport default web3;","map":{"version":3,"sources":["/Users/EmpauraX/Desktop/Blockchain/Ethereum_Solidity_Developer/CrowdFunding-Ethereum/ethereum/web3.js"],"names":["Web3","web3","window","ethereum","request","method","givenProvider","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,IAAJ,C,CACA;AACA;;AACA,IAAI,SAAiC,OAAOC,MAAM,CAACD,IAAd,KAAuB,WAA5D,EAAyE;AACrE;AACAC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAxB,EAFqE,CAIrE;AACA;;AACAJ,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASA,IAAI,CAACM,aAAd,CAAP;AACH,CAPD,MAOO;AACH;AACA;AACA,QAAMC,QAAQ,GAAG,IAAIP,IAAI,CAACQ,SAAL,CAAeC,YAAnB,CACb,+DADa,CAAjB;AAIAR,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASO,QAAT,CAAP;AACH,C,CAED;;;AACA,eAAeN,IAAf","sourcesContent":["import Web3 from 'web3'; \n\nlet web3;\n// Clause handles case of code being executed in browser and metamask is available.\n//typeof operator : to see if variable is defined\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n    // Connect to metamask\n    window.ethereum.request({ method: 'eth_requestAccounts' });\n\n    //create new instance of Web3 and pass the injected web3 from metamask and it's respective provider to Rinkeby testnet specified in MetaMask tool\n    // hijack injected web3 instance from metamask and pass provider into web3 v1.0.3\n    web3 = new Web3(Web3.givenProvider);\n} else {\n    //We are on the server *OR* the user is not running metamask\n    //Passing in the Infura API Key to communicate with the Infura Ethereum Node \n    const provider = new Web3.providers.HttpProvider(\n        'https://rinkeby.infura.io/v3/b775911c6d024d2f98148e74f80eff86'\n    );\n\n    web3 = new Web3(provider);\n}\n\n//Export instance\nexport default web3;"]},"metadata":{},"sourceType":"module"}